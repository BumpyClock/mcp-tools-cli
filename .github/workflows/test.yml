name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Fast smoke tests for quick feedback
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[testing]
    
    - name: Run smoke tests
      run: |
        python -m pytest -m smoke --tb=short -v --timeout=30
  
  # Unit tests across multiple Python versions
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: smoke-tests
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size - only test 3.8 and 3.12 on non-Linux
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.11'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[testing]
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -m "unit and not slow" --tb=short -v --timeout=60
  
  # Integration tests with coverage
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: smoke-tests
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[testing,integration]
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ --tb=short -v --timeout=120
    
    - name: Run integration tests with coverage
      run: |
        python -m pytest tests/integration/ \
          --cov=src/mcp_manager \
          --cov-report=xml:coverage-integration.xml \
          --cov-report=term-missing \
          --tb=short -v --timeout=120
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage-integration.xml
        flags: integration
        name: integration-coverage
  
  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    timeout-minutes: 45
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[testing]
    
    - name: Run performance tests
      run: |
        python -m pytest tests/performance/ --tb=short -v --timeout=300
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: |
          *.json
          *.txt
  
  # Compatibility tests
  compatibility-tests:
    name: Compatibility Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [unit-tests]
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[testing]
    
    - name: Run compatibility tests
      run: |
        python -m pytest tests/compatibility/ --tb=short -v --timeout=180
  
  # Comprehensive test suite with full coverage
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, compatibility-tests]
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[testing,integration]
    
    - name: Run comprehensive test suite
      run: |
        python -m pytest tests/ \
          --cov=src/mcp_manager \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --tb=short -v --timeout=300
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: comprehensive
        name: comprehensive-coverage
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-html-report
        path: htmlcov/
  
  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run black formatter check
      run: |
        black --check --diff src/ tests/
    
    - name: Run isort import sorter check
      run: |
        isort --check-only --diff src/ tests/
    
    - name: Run mypy type checker
      run: |
        mypy src/mcp_manager/ --ignore-missing-imports
    
    - name: Run flake8 linter
      run: |
        pip install flake8
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
  
  # Security checks
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check for known vulnerabilities
      run: |
        safety check --json || true
    
    - name: Run bandit security linter
      run: |
        bandit -r src/ -f json || true

# Workflow status badge in README.md:
# [![Test Suite](https://github.com/BumpyClock/dotfiles/workflows/Test%20Suite/badge.svg)](https://github.com/BumpyClock/dotfiles/actions/workflows/test.yml)